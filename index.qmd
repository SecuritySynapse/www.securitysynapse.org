---
pagetitle: "Security Synapse"
layout: full
toc: false
listing:
  - id: featured-slides
    contents:
      - "slides/**/*.qmd"
      - "!slides/index.qmd"
      - "!slides/css/**/*.qmd"
    sort:
      - "date desc"
      - "title"
    type: default
    date-format: "MM/DD/YYYY"
    sort-ui: false
    filter-ui: false
    fields: [title, date, description]
    max-items: 3
    page-size: 3

---

![](images/Security-Synapse-Logo.svg){fig-align="center"}

## Welcome to an Adventure in Computer Security!

With the goal of enabling the growth of computer security engineers, this web
site features a sixteen-week schedule filled with activities that support the
development of your professional and technical capacities in the field of
computer security. One of the primary goals of this course is to create a
*security synapse* by connecting high-level concepts in the field of computer
security with their implementation in programming languages such as Python,
Java, C, Go, and Rust. Along with leveraging research papers and
popular-press articles, this course references three open-access books:
[Computer Systems Security: Planning for
Success](https://web.njit.edu/~rt494/security/), [Cracking Codes with
Python](https://inventwithpython.com/cracking/), and [Operating Systems: Three
Easy Pieces](https://pages.cs.wisc.edu/~remzi/OSTEP/). You can access all of
the source code and technical content for this course by checking out its
[GitHub organization](https://github.com/SecuritySynapse),
[schedule](schedule/index.qmd), and [slides](slides/index.qmd).

## Resources for Making a Security Synapse

Interested in getting started on a computer security adventure? Begin here:

- The [course syllabus](./syllabus/index.qmd) introduces the course and its
learning objectives, overviews the security survey and security summit projects,
and explains how on-campus learners will be assessed by the instructor
through examinations and in-person evaluations.

- The [sixteen-week course schedule](./schedule/index.qmd) offers detailed
insights into each step that learners should take to help them to effectively
make security synapses, including a list of reading assignments and descriptions
of the class activities and projects.

- The [course slides](slides/index.qmd) are a valuable resource for learners who
want to make a security synapse. These slides present an overview of high-level
concepts and provide both more detailed explanations and implementations in
various programming languages.

- The [course projects](projects/index.qmd) page furnishes descriptions of each
two-week project that learners complete to ensure that they have suitable
hands-on practice to make a security synapse and achieve the learning
objectives for the course. The project list also includes details about the
long-term computer security summit project that invites learners to propose,
conduct, and report on an independent research project.

## Connecting Concepts to Code

Do you wonder how to practically apply the concepts you are learning about,
say, cryptography? As you browse the technical resources on this site you will
notice that they often contain both Python source code and the output from
running code.

```{python}
from cryptography.fernet import Fernet
import json

def encrypt_file(file_path: str, key: str):
    """Encrypt a file using a symmetric key."""
    # load the file
    with open(file_path, 'r') as file:
        data = json.load(file)
    # convert the dictionary into a string
    data_string = json.dumps(data, sort_keys=True)
    # create a Fernet object
    fernet = Fernet(key)
    # encrypt and return the data
    encrypted_data = fernet.encrypt(data_string.encode())
    return encrypted_data

# generate a symmetric key
key = Fernet.generate_key()
# encrypt the file and display it
encrypted_data = encrypt_file('slides/weektwo/security.json', key)
print(encrypted_data)
```

The prior source code segment demonstrates how to use the `Fernet` symmetric key
encryption algorithm to encrypt a JSON file. The output of this code is the
encrypted file that can only be decrypted using the same symmetric key. Notably,
this output was produced by automatically running the `encrypt_file` function
when this site was deployed! If you check the [course slides](slides/index.qmd)
you can see many other Python source code segments --- including some that you
can modify and run through an editor in the slide!

## Recent Slide Decks

Focused on presenting an overview of high-level technical concepts and a
thorough investigation of their low-level technical implementation, the [course
slides](slides/index.qmd) are a valuable resource for learners who want to make
a security synapse. The slides are designed to be interactive, allowing learners
to see the output of code segments and, for many algorithms, modify their inputs
and/or experiment with their implementation. Want to learn more? Here are quick
references to some recently presented slide decks:

:::{#featured-slides}
:::

::: {.callout-note appearance="minimal" title="Security Synapse Community Resources"}

Interested in connecting with other like-minded security engineers? Please join
the [Security Synapse Discord Server](https://discord.gg/juUXz7d4Jh) and join the
conversation! If you are an on-campus learning at Allegheny College, you may
also join the [Allegheny College Computer Science Discord
Server](https://discord.gg/CS2h9kXzX6). Finally, if you are an on-campus
learner, then you may schedule a meeting with the course instructor during
office hours by visiting the [Course Instructor's Appointment
Scheduler](https://www.gregorykapfhammer.com/schedule/).

:::
