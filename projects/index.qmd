---
title: Projects
layout: full
toc: true
---

Want to make a "security synapse"? That is to say, do you want to make
conceptual and practical connections in the field of computer security? Check
out these projects to learn more about how to apply what you are learning in the
field of computer security! Projects invite you to complete projects in fields
like fuzzing and cryptography. Each projects explores a specific topic in
connection with content from one of these online textbooks:

- {{< iconify fa6-solid book-open >}} Online textbook called [Computer Systems
Security: Planning for Success](https://web.njit.edu/~rt494/security/) 
- {{< iconify fa6-solid book-open >}} Online textbook called [Cracking Codes
with Python](https://inventwithpython.com/cracking/) 
- {{< iconify fa6-solid book-open >}} Online textbook called [Operating Systems:
Three Easy Pieces](https://pages.cs.wisc.edu/~remzi/OSTEP/) 

## Security Survey Projects

### Project One: Server Fuzzing

#### Preparation

- {{< iconify fa6-solid book-open size=18px >}} **Review**: Chapter one of
[Computer Systems Security: Planning for
Success](https://web.njit.edu/~rt494/security/)

- {{< iconify fa6-solid lightbulb size=18px >}} **Insight**: Chapter one of
[CSP](https://web.njit.edu/~rt494/security/) explains that a server demonstrates
*availability* if is up and running for valid users. However, if a server is
running a process that contains a defect that results in a system crash, then
this is a direct threat to its availability. However, since the programs that
run on servers often have complex input spaces and implementations, it is often
difficult to quickly find these availability threats.

- {{< iconify fa6-solid code size=18px >}} **Task**: This project invites you to
implement a `serverfuzzer` in the Python programming language that will
automatically fuzz a specific function in a server's implementation.
Specifically, you will implement a fuzzer that will automatically generate
certain type of JSON inputs, submit those inputs to an in-memory server, observe
the output and behavior of the server, and record important details and any
crashes. As you complete the project, please be mindful that it makes certain
restrictions of the types of JSON inputs your `serverfuzzer` should generate!

#### Resources

To learn more about fuzzing and to gather inspiration for your own
implementation of the `serverfuzzer`, please consult the following technical
resources about building fuzzers:

- [Atheris: A Coverage-Guided, Native Python Fuzzer](https://github.com/google/atheris)
- [AFL: American Fuzzy Lop, A Security-Oriented Fuzzer](https://github.com/google/AFL)
- [Fuzzing: Breaking Things with Random Inputs](https://www.fuzzingbook.org/html/Fuzzer.html)
- [Property-Based Testing with Hypothesis](https://github.com/HypothesisWorks/hypothesis)

Interested in working on this project? See the [{{< iconify fa6-brands github
size=18px >}}
server-fuzzing-starter](https://github.com/SecuritySynapse/server-fuzzing-starter)
template repository to get started! Questions? Share them in the [Security
Synapse Discord Server](https://discord.gg/juUXz7d4Jh).

### Project Two: Cryptography Benchmarking

#### Preparation

- {{< iconify fa6-solid book-open size=18px >}} **Review**: Chapters one and two
of [Computer Systems Security: Planning for
Success](https://web.njit.edu/~rt494/security/) and Chapters four through twelve
of [Cracking Codes with Python](https://inventwithpython.com/cracking/)

- {{< iconify fa6-solid lightbulb size=18px >}} **Insight**: Chapter four
through twelve of [CCP](https://inventwithpython.com/cracking/) introduce a wide
variety of different cryptography algorithms an explain how they may be cracked.
Even though it is important to understand how to implement these algorithms,
they are not examples of modern cryptography algorithms like the advanced
encryption standard (AES). It is also important to point out that different
implementations of AES, like versions of `Fernet` that are implemented purely in
Python or in a combination of Rust and Python, may have different performance
trade-offs worthy of additional experimental study.

- {{< iconify fa6-solid code size=18px >}} **Task**: This project invites you to
implement a `cryptobenchmark` in the Python programming language that will
automatically perform a [doubling experiment](https://algorithmology.org/) to
measure the encryption and decryption performance for the `Fernet` and `rFernet`
ciphers. This program should randomly generate data and the measure and report
the time and space overheads arising from use of the `Fernet` and `rFernet`
ciphers.

#### Resources

To learn more about fuzzing and to gather inspiration for your own
implementation of the `cryptobenchmark`, please consult the following technical
resources about cryptography using various implementations of the advanced
encryption standard as `Fernet`:

- [Fernet: A Python Implementation of AES](https://cryptography.io/en/latest/fernet/)
- [rFernet: A Rust-Based Implementation of AES for Python](https://github.com/aviramha/rfernet)
- [fernet-rs: An Implementation of Fernet in Rust](https://github.com/mozilla-services/fernet-rs)

Interested in working on this project? See the [{{< iconify fa6-brands github
size=18px >}}
server-fuzzing-starter](https://github.com/SecuritySynapse/cryptography-benchmarking-starter)
template repository to get started! Questions? Share them in the [Security
Synapse Discord Server](https://discord.gg/juUXz7d4Jh).

### Project Three: Network Monitoring

#### Preparation

- {{< iconify fa6-solid book-open size=18px >}} **Review**: Chapters four and five 
of [Computer Systems Security: Planning for
Success](https://web.njit.edu/~rt494/security/)

- {{< iconify fa6-solid lightbulb size=18px >}} **Insight**: Chapters four and
five of [Computer Systems Security: Planning for
Success](https://web.njit.edu/~rt494/security/) introduce some of the commonly
used networking protocols and the ways in which they may be attacked. When a
client and a server are communicating over a network, it is possible for a
malicious actor to run a program that intercepts their communication. If the
communication between the client and server is not encrypted, then the malicious
actor can read the messages and even modify them.

- {{< iconify fa6-solid code size=18px >}} **Task**: This project invites you to
implement a `networkmonitor` in the Python programming language that conducts
network monitoring by creating clients and servers on localhost and then
monitoring the network traffic between the client and the server. The program
supports different modes of operation, including server and client modes using
either sockets or XML-RPC, and interception modes for monitoring network
communication with either of the aforementioned protocols. Ultimately, the
`networkmonitor` should start a separate process in one of these modes:
  - **Client and Server Protocols**:
    - **Socket Server**: Start a server using sockets.
    - **Socket Client**: Start a client using sockets.
    - **XML-RPC Server**: Start a server using XML-RPC.
    - **XML-RPC Client**: Start a client using XML-RPC.
  - **Interception Mechanisms**:
    - **Socket Interception**: Intercept network communication using sockets.
    - **XML-RPC Interception**: Intercept network communication using XML-RPC.

#### Resources

To learn more about fuzzing and to gather inspiration for your own
implementation of the `networkmonitor`, please consult the following technical
resources about the network communication with either sockets or XML-RPC in
Python, the TCP/IP protocol and the layout of their headers and payloads, and
various network monitoring techniques:

- **IP Header Structure**
  - [IPv4 Protocol Description on Wikipedia](https://en.wikipedia.org/wiki/IPv4)
  - [Reading Binary Data with Python](https://reachtim.com/reading-binary-data-with-python)

- **TCP Header Structure**
  - [TCP Protocol Description on
  Wikipedia](https://en.wikipedia.org/wiki/Transmission_Control_Protocol)
  - [TCP Header Format on
  GeeksforGeeks](https://www.geeksforgeeks.org/introduction-and-ipv4-datagram-header/)

- **Python Networking**
  - [Python XML-RPC Library](https://docs.python.org/3/library/xmlrpc.server.html)
  - [Python Socket Library](https://docs.python.org/3/library/socket.html)
  - [Python Struct Library](https://docs.python.org/3/library/struct.html)
  - [Regarding struct.unpack() in Python](https://stackoverflow.com/questions/20768107/regarding-struct-unpack-in-python)

Interested in working on this project? See the [{{< iconify fa6-brands github
size=18px >}}
network-monitoring-starter](https://github.com/SecuritySynapse/network-monitoring-starter)
template repository to get started! Questions? Share them in the [Security
Synapse Discord Server](https://discord.gg/juUXz7d4Jh).

### Project Four: Program Tracing

#### Preparation

- {{< iconify fa6-solid book-open size=18px >}} **Review**: Chapters six and
seven of [Computer Systems Security: Planning for
Success](https://web.njit.edu/~rt494/security/)

- {{< iconify fa6-solid lightbulb size=18px >}} **Insight**: Chapters six and
seven of [Computer Systems Security: Planning for
Success](https://web.njit.edu/~rt494/security/) introduce some of the commonly
employed security solutions that can prevent attacks on computer security. A
layered security approach that prevents the insertion of malware into a computer
program may involve tracing (or, monitoring) the program's execution to discover
what instructions it executes and how it accesses memory. Having access to a
program trace can help a security engineer to discern when it is infect with
malware. Program tracing can also be used to analyze the behavior of malware to
understand how it operates and to aid in its detection.

- {{< iconify fa6-solid code size=18px >}} **Task**: This project invites you to
implement a `programtracer` in the Python programming language that observes the
instruction and memory accesses of a program and records them in a log file. The
`programtracer` output should include all of the executed instructions at the
level of, for instance, the abstract syntax tree (AST), the Python source code,
and/or the native code produced by the Python interpreter. Whenever possible,
the trace should also include the values of variables that were accessed by each
of the detected instructions. The trace should be stored in a file in either a
plaintext, comma-separated value (CSV), or JavaScript object notation (JSON)
format. The `programtracer` tool should have these features:

  - **Command-Line Interface**: A command-line interface (CLI) that accepts the
  name of a Python program and/or a Python program's test suite and then
  performs the program tracing when the tests run on the program.
  - **Program Tracing**: An implementation of tracer for the execution of a
  Python program that saves the trace in a suitable format in a specified
  directory and file.
  - **Variable Tracking**: An implementation of a means to track the values of
  variables as they are referenced by the specific instructions in the program's
  source code.
  - **Trace Analysis**: A module that can automatically analyze the trace by
  reporting information about, for instance, the number of instructions in the
  trace, the number of times each instruction was executed, the number of times
  a variable is accessed by all of the program's instructions, and the number of
  unique values stored in the variables accessed by the instructions.
  - **Trace Comparison**: A module that compares two or more traces and surfaces
  the similarities and differences between the them. Examples of trace
  comparison operators could include pointing out differences in the executed
  instructions or variable accesses. This feature would be useful in the context
  of malware analysis to compare the behavior of one version of a malware to the
  prior version of the same malware. It would also be useful to compare the
  original version of a program to one that might be infected by malware.
  - **Efficiency Analysis**: At least two different efficiency analysis features
  that involve measuring the performance of tasks such as creating the trace,
  saving the trace, analyzing one or more traces, or the size of the traces when
  either stored in memory or on disk.

#### Resources

To learn more about fuzzing and to gather inspiration for your own
implementation of the `networkmonitor`, please consult the following technical
resources about the network communication with either sockets or XML-RPC in
Python, the TCP/IP protocol and the layout of their headers and payloads, and
various network monitoring techniques:

- **IP Header Structure**
  - [IPv4 Protocol Description on Wikipedia](https://en.wikipedia.org/wiki/IPv4)
  - [Reading Binary Data with Python](https://reachtim.com/reading-binary-data-with-python)

- **TCP Header Structure**
  - [TCP Protocol Description on
  Wikipedia](https://en.wikipedia.org/wiki/Transmission_Control_Protocol)
  - [TCP Header Format on
  GeeksforGeeks](https://www.geeksforgeeks.org/introduction-and-ipv4-datagram-header/)

- **Python Networking**
  - [Python XML-RPC Library](https://docs.python.org/3/library/xmlrpc.server.html)
  - [Python Socket Library](https://docs.python.org/3/library/socket.html)
  - [Python Struct Library](https://docs.python.org/3/library/struct.html)
  - [Regarding struct.unpack() in Python](https://stackoverflow.com/questions/20768107/regarding-struct-unpack-in-python)

Interested in working on this project? See the [{{< iconify fa6-brands github
size=18px >}}
network-monitoring-starter](https://github.com/SecuritySynapse/network-monitoring-starter)
template repository to get started! Questions? Share them in the [Security
Synapse Discord Server](https://discord.gg/juUXz7d4Jh).
