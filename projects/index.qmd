---
title: Projects
layout: full
toc: true
---

Want to make a "security synapse"? That is to say, do you want to make
conceptual and practical connections in the field of computer security? Check
out these projects to learn more about how to apply what you are learning in the
field of computer security! Projects invite you to complete projects in fields
like fuzzing and cryptography. Each projects explores a specific topic in
connection with content from one of these online textbooks:

- {{< iconify fa6-solid book-open >}} Online textbook called [Computer Systems
Security: Planning for Success](https://web.njit.edu/~rt494/security/) 
- {{< iconify fa6-solid book-open >}} Online textbook called [Cracking Codes
with Python](https://inventwithpython.com/cracking/) 
- {{< iconify fa6-solid book-open >}} Online textbook called [Operating Systems:
Three Easy Pieces](https://pages.cs.wisc.edu/~remzi/OSTEP/) 

## Security Survey Projects

### Project One: Server Fuzzing

#### Preparation

- {{< iconify fa6-solid book-open size=18px >}} **Review**: Chapter one of
[Computer Systems Security: Planning for
Success](https://web.njit.edu/~rt494/security/)

- {{< iconify fa6-solid lightbulb size=18px >}} **Insight**: Chapter one of
[CSP](https://web.njit.edu/~rt494/security/) explains that a server demonstrates
*availability* if is up and running for valid users. However, if a server is
running a process that contains a defect that results in a system crash, then
this is a direct threat to its availability. However, since the programs that
run on servers often have complex input spaces and implementations, it is often
difficult to quickly find these availability threats.

- {{< iconify fa6-solid code size=18px >}} **Task**: This project invites you to
implement a `serverfuzzer` in the Python programming language that will
automatically fuzz a specific function in a server's implementation.
Specifically, you will implement a fuzzer that will automatically generate
certain type of JSON inputs, submit those inputs to an in-memory server, observe
the output and behavior of the server, and record important details and any
crashes. As you complete the project, please be mindful that it makes certain
restrictions of the types of JSON inputs your `serverfuzzer` should generate!

#### Resources

To learn more about fuzzing and to gather inspiration for your own
implementation of the `serverfuzzer`, please consult the following technical
resources about building fuzzers:

- [Atheris: A Coverage-Guided, Native Python Fuzzer](https://github.com/google/atheris)
- [AFL: American Fuzzy Lop, A Security-Oriented Fuzzer](https://github.com/google/AFL)
- [Fuzzing: Breaking Things with Random Inputs](https://www.fuzzingbook.org/html/Fuzzer.html)
- [Property-Based Testing with Hypothesis](https://github.com/HypothesisWorks/hypothesis)

Interested in working on this project? See the [{{< iconify fa6-brands github
size=18px >}}
server-fuzzing-starter](https://github.com/SecuritySynapse/server-fuzzing-starter)
template repository to get started! Questions? Share them in the [Security
Synapse Discord Server](https://discord.gg/juUXz7d4Jh).

### Project Two: Cryptography Benchmarking

#### Preparation

- {{< iconify fa6-solid book-open size=18px >}} **Review**: Chapters one and two
of [Computer Systems Security: Planning for
Success](https://web.njit.edu/~rt494/security/) and Chapters four through twelve
of [Cracking Codes with Python](https://inventwithpython.com/cracking/)

- {{< iconify fa6-solid lightbulb size=18px >}} **Insight**: Chapter four
through twelve of [CCP](https://inventwithpython.com/cracking/) introduce a wide
variety of different cryptography algorithms an explain how they may be cracked.
Even though it is important to understand how to implement these algorithms,
they are not examples of modern cryptography algorithms like the advanced
encryption standard (AES). It is also important to point out that different
implementations of AES, like versions of `Fernet` that are implemented purely in
Python or in a combination of Rust and Python, may have different performance
trade-offs worthy of additional experimental study.

- {{< iconify fa6-solid code size=18px >}} **Task**: This project invites you to
implement a `cryptobenchmark` in the Python programming language that will
automatically perform a [doubling experiment](https://algorithmology.org/) to
measure the encryption and decryption performance for the `Fernet` and `rFernet`
ciphers. This program should randomly generate data and the measure and report
the time and space overheads arising from use of the `Fernet` and `rFernet`
ciphers.

#### Resources

To learn more about fuzzing and to gather inspiration for your own
implementation of the `cryptobenchmark`, please consult the following technical
resources about cryptography using various implementations of the advanced
encryption standard as `Fernet`:

- [Fernet: A Python Implementation of AES](https://cryptography.io/en/latest/fernet/)
- [rFernet: A Rust-Based Implementation of AES for Python](https://github.com/aviramha/rfernet)
- [fernet-rs: An Implementation of Fernet in Rust](https://github.com/mozilla-services/fernet-rs)

Interested in working on this project? See the [{{< iconify fa6-brands github
size=18px >}}
server-fuzzing-starter](https://github.com/SecuritySynapse/cryptography-benchmarking-starter)
template repository to get started! Questions? Share them in the [Security
Synapse Discord Server](https://discord.gg/juUXz7d4Jh).
