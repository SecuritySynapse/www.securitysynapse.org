---
title: "Access Controls"
subtitle: "Exploring Ways to Securely Manage Access"
description: "How to offer secure access to systems and data?"
date: "2024-11-11"
date-format: long
author: Gregory M. Kapfhammer
execute:
  echo: true
jupyter: python3
format:
  revealjs:
    completion: true
    theme: default
    css: ../css/styles.css
    history: false
    scrollable: true
    transition: slide
    highlight-style: github
    footer: "Security Synapse"
---

# Key computer computer security tasks?

::: {.fragment .fade style="margin-top: -0.45em; font-size: 1.00em;"}

- **Authentication**: Confirm the identity of a user
- **Authorization**: Control access to resources
- **Accounting**: Track usage of resources

:::

::: {.fragment .boxed-content .fade style="margin-top: -0.25em; font-size: 0.80em;"}

- **Reminders**:
  - Must effectively offer *all* features in a system!
  - Both *hardware and software* must be secure!

:::

# Least Privilege Principle

::: {.fragment .fade style="margin-top: -0.45em; font-size: 1.00em;"}

- **Principle**: Only permit necessary access
- **Resources**: Processes, programs, user accounts
- **Benefits**: Reduces attack surface, limits malware spread
- **Compliance**: Easier audits, limited Internet access

:::

::: {.fragment .boxed-content .fade style="margin-top: -0.25em; font-size: 0.80em;"}

- {{< iconify fa6-solid award >}} **Key Questions**:
  - What do you prefer *more secure* or *easy-to-use*?
  - What are principles to *striking* the *right balance*?

:::

## Multi-Factor Authentication (MFA)

::: {.fragment .fade style="margin-top: -0.45em; font-size: 1.00em;"}

- **Definition**: Two or more identification components
- **Categories**: Username, password, token codes, biometrics
- **Popular Products**: Google Authenticator, Authy, RSA IDs

:::

::: {.fragment .boxed-content style="margin-top: -0.25em; font-size: 0.9em;"}

- {{< iconify fa6-solid arrows-rotate >}} Concrete examples of multi-factor authentication:
  - Password and fingerprint scan
  - Password and security token
  - Password and facial recognition

- {{< iconify fa6-solid lightbulb >}} **Benefits and drawbacks of multi-factor
authentication**?

:::

## Authenticating a Person

::: {.fragment .boxed-content .fade style="margin-top: 0.25em; font-size: 1em;"}

- **Three main strategies for authentication**:
  - Authentication based on *what you know*
  - Authentication based on *what you have*
  - Authentication based on *what you are*
  - Each of these are an *identification factor*

:::

::: {.fragment .fade-up style="margin-top: 0.25em; font-size: 0.9em;"}

- {{< iconify fa6-solid people-line >}} **In-Class Discussion**
  - What is an example of each type of authentication?
  - What are the strengths and weaknesses of each type?

:::

# What comes next after authentication?

::: fragment

- Provide **authorization** for both users and administrators
- Attach an **identity** to processes and resources
- Define **access control lists** (ACLs) for resources
- Enforce **permissions** for users and groups

:::

# Authorization Models

::: {.fragment .fade style="margin-top: -0.45em; font-size: 1.00em;"}

- **MAC**: Mandatory Access Control
  - High security, complex implementation
- **DAC**: Discretionary Access Control
  - Flexible, owner-controlled, less secure
- **RBAC**: Role-Based Access Control
  - Role-based, flexible, common
- **ABAC**: Attribute-Based Access Control
  - Attribute-based, flexible, rule-based

:::
