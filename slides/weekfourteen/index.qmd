---
title: "Revisiting Cryptography"
subtitle: "Understanding the Role of Cryptography in Security"
description: "How does cryptography fit into modern software?"
date: "2024-11-25"
date-format: long
author: Gregory M. Kapfhammer
execute:
  echo: true
jupyter: python3
format:
  revealjs:
    completion: true
    theme: default
    css: ../css/styles.css
    history: false
    scrollable: true
    transition: slide
    highlight-style: github
    footer: "Security Synapse"
---

# What role should cryptography play in secure software?

::: {.incremental .fade style="margin-top: -0.45em; font-size: 0.95em;"}

- Hashing
- Signatures
- Encryption
- Decryption

:::

## Example: Using SSH Keys on GitHub

::: {.incremental .fade style="margin-top: -0.45em; font-size: 0.95em;"}

- **Step 1**: Generate a new SSH key
- **Step 2**: Add the SSH key to your GitHub account
- **Step 3**: Run an SSH agent in the background
- **Step 4**: Clone a repository using SSH

:::

::: {.fragment .boxed-content .fade style="margin-top: -0.25em; font-size: 0.80em;"}

- {{< iconify fa6-solid people-line >}} **In-Class Discussion**:
  - What program(s) did you use to complete these steps?
  - Does this use symmetric or asymmetric cryptography?
  - How does this different from using a password?
  - What are the trade-offs of these different approaches?

:::

# Practical Exploration: Try to use the `ssh-keygen` program! What do the public and private keys look like?

# What are some other cryptographic methods?

::: incremental

- Affine ciphers
- Substitution ciphers
- Vigenere ciphers

:::

::: {.fragment .callout-note icon=false title="Cryptography Reminders" style="margin-top: -0.45em;"}

- Explore ciphers to understand key principles of cryptography
- Offer initial implementations in Python --- but explore others!

:::

## Mathematical Background

```{python}
def gcd(a: int, b: int) -> int:
    while b != 0:
        a, b = b, a % b
    return a

def mod_inverse(a: int, m: int) -> int:
    for x in range(1, m):
        if (a * x) % m == 1:
            return x
    raise ValueError("Modular inverse does not exist.")
```

::: {.fragment style="margin-top: 0.25em;"}

- {{< iconify fa6-solid people-line >}} **In-Class Discussion**
    - What are the input and output types of these functions?
    - What is the purpose of the `%` operator in these functions?
    - What do the `gcd` and `mod_inverse` functions do?

:::

## Using the `gcd` Function

```{python}
a = 10
b = 26
gcd_result = gcd(a, b)
print(f"gcd({a}, {b}) = {gcd_result}")

a = 5
b = 26
gcd_result = gcd(a, b)
print(f"gcd({a}, {b}) = {gcd_result}")

a = 17
b = 31
gcd_result = gcd(a, b)
print(f"gcd({a}, {b}) = {gcd_result}")
```

::: fragment

What do outputs show about the `gcd` function's behavior?

:::

## Using the `mod_inverse` Function

```{python}
a = 10
m = 26
try:
    mod_inverse_result = mod_inverse(a, m)
    print(f"mod_inverse({a}, {m}) = {mod_inverse_result}")
except ValueError as e:
    print(e)

a = 17
m = 31
try:
    mod_inverse_result = mod_inverse(a, m)
    print(f"mod_inverse({a}, {m}) = {mod_inverse_result}")
except ValueError as e:
    print(e)
```

::: fragment

What is the behavior of the `mod_inverse` function?

:::

# Goal: Find the number `x` such that when `a` is multiplied by `x` and then divided by `m`, the remainder is 1!

## Checking `mod_inverse`

```{python}
a = 17
m = 31
numerator = 17 * 11
denominator = 31
result = numerator // denominator
remainder = numerator % denominator
print(f"The result of {numerator} divided by {denominator}")
print(f"is {result} with a remainder of {remainder}")
```

::: fragment

- Did the `mod_inverse` function return the correct result?
- What is the time complexity of the `mod_inverse` function?
- How does this connection to affine ciphers?
- Okay, let's explore this cryptosystem in greater detail!

:::

## Encryption with Affine Ciphers

```{python}
def affine_encrypt(plaintext, a, b):
    if gcd(a, 26) != 1:
        raise ValueError("a and 26 are not coprime, choose a different 'a' value.")
    ciphertext = ""
    for char in plaintext:
        if char.isalpha():
            # convert character to 0 to 25 range
            x = ord(char.lower()) - ord('a')
            # apply affine transformation
            encrypted_char = (a * x + b) % 26
            # convert back to character and preserve case
            if char.islower():
                ciphertext += chr(encrypted_char + ord('a'))
            else:
                ciphertext += chr(encrypted_char + ord('A'))
        else:
            ciphertext += char
    return ciphertext

plaintext = "Make a security synapse"
a = 5
b = 8
encrypted = affine_encrypt(plaintext, a, b)
print(f"Encrypted: {encrypted}")
```

## Decryption with Affine Ciphers

```{python}
def affine_decrypt(ciphertext, a, b):
    if gcd(a, 26) != 1:
        raise ValueError("a and 26 are not coprime, choose a different 'a' value.")
    plaintext = ""
    # find modular inverse of a
    a_inv = mod_inverse(a, 26)
    for char in ciphertext:
        if char.isalpha():
            # convert character to 0 to 25 range
            y = ord(char.lower()) - ord('a')
            # apply inverse affine transformation
            decrypted_char = (a_inv * (y - b)) % 26
            # convert back to character and preserve case
            if char.islower():
                plaintext += chr(decrypted_char + ord('a'))
            else:
                plaintext += chr(decrypted_char + ord('A'))
        else:
            plaintext += char
    return plaintext

decrypted = affine_decrypt(encrypted, a, b)
print(f"Decrypted: {decrypted}")
```

## Recapping the Affine Cipher

::: {.fragment .callout-note icon=false title="Lessons Learned about Affine Cipher" style="margin-top: 0em;"}

::: incremental

- Affine ciphers use modular arithmetic and inverses

- Code segment from the encryption function:
  - `encrypted_char = (a * x + b) % 26`

- Code segment from the decryption function:
  - `decrypted_char = (a_inv * (y - b)) % 26`

- Importantly, it is vulnerable to frequency analysis attacks
- However, it illustrates role of modular arithmetic and primes!

- Any questions about the `encrypt` or `decrypt` functions?

:::

:::

# Exploring Substitution Ciphers Like Vigenere

::: fragment

- Type of substitution cipher
- Uses a keyword to encrypt messages
- Encrypts each letter with a different shift value
- Let's explore these functions:
  - `vigenere_encrypt`
  - `vigenere_decrypt`

:::

## Encrypting with Vigenere

```{python}
def vigenere_encrypt(plaintext: str, key: str) -> str:
    key = key.lower()
    key_length = len(key)
    ciphertext = ""
    for i, char in enumerate(plaintext):
        if char.isalpha():
            shift = ord(key[i % key_length]) - ord('a')
            if char.islower():
                encrypted_char = chr((ord(char) - ord('a') + shift) % 26 + ord('a'))
            else:
                encrypted_char = chr((ord(char) - ord('A') + shift) % 26 + ord('A'))
            ciphertext += encrypted_char
        else:
            ciphertext += char
    return ciphertext

plaintext = "Make a security synapse"
key = "key"
encrypted = vigenere_encrypt(plaintext, key)
print(f"Encrypted: {encrypted}")
```

## Decrypting with Vigenere

```{python}
def vigenere_decrypt(ciphertext, key):
    key = key.lower()
    key_length = len(key)
    plaintext = ""
    for i, char in enumerate(ciphertext):
        if char.isalpha():
            shift = ord(key[i % key_length]) - ord('a')
            if char.islower():
                decrypted_char = chr((ord(char) - ord('a') - shift + 26) % 26 + ord('a'))
            else:
                decrypted_char = chr((ord(char) - ord('A') - shift + 26) % 26 + ord('A'))
            plaintext += decrypted_char
        else:
            plaintext += char
    return plaintext

decrypted = vigenere_decrypt(encrypted, key)
print(f"Decrypted: {decrypted}")
```

## Recapping the Vigenere Cipher

::: {.fragment .callout-note icon=false title="Lessons Learned about Vigenere Cipher" style="margin-top: 0em;"}

::: incremental

- Vigenere ciphers use a repeating key to shift letters

- Code segment from the encryption function:
  - `encrypted_char = chr((ord(char) - ord('a') + shift) % 26 + ord('a'))`

- Code segment from the decryption function:
  - `decrypted_char = chr((ord(char) - ord('a') - shift + 26) % 26 + ord('a'))`

- Importantly, it is more secure than simple substitution ciphers
- However, it is still vulnerable to frequency analysis with long ciphertexts

:::

:::
