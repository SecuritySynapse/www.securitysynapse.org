---
title: "Revisiting Cryptography"
subtitle: "Understanding the Role of Cryptography in Security"
description: "How does cryptography fit into modern software?"
date: "2024-11-25"
date-format: long
author: Gregory M. Kapfhammer
execute:
  echo: true
jupyter: python3
format:
  revealjs:
    completion: true
    theme: default
    css: ../css/styles.css
    history: false
    scrollable: true
    transition: slide
    highlight-style: github
    footer: "Security Synapse"
---

# What role should cryptography play in secure software?

::: {.incremental .fade style="margin-top: -0.45em; font-size: 0.95em;"}

- Hashing
- Signatures
- Encryption
- Decryption

:::

## Example: Using SSH Keys on GitHub

::: {.incremental .fade style="margin-top: -0.45em; font-size: 0.95em;"}

- **Step 1**: Generate a new SSH key
- **Step 2**: Add the SSH key to your GitHub account
- **Step 3**: Run an SSH agent in the background
- **Step 4**: Clone a repository using SSH

:::

::: {.fragment .boxed-content .fade style="margin-top: -0.25em; font-size: 0.80em;"}

- {{< iconify fa6-solid people-line >}} **In-Class Discussion**:
  - What program(s) did you use to complete these steps?
  - Does this use symmetric or asymmetric cryptography?
  - How does this different from using a password?
  - What are the trade-offs of these different approaches?

:::

# Practical Exploration: Try to use the `ssh-keygen` program! What do the public and private keys look like?

# What are some other cryptographic methods?

::: incremental

- Affine ciphers
- Substitution ciphers
- Vigenere ciphers

:::

::: {.fragment .callout-note icon=false title="Cryptography Reminders" style="margin-top: -0.45em;"}

- Explore ciphers to understand key principles of cryptography
- Offer initial implementations in Python --- but explore others!

:::
